<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9995</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// OBJECT USED FOR GMUI INSTANCE

// !READ HERE!
// :
// GMUI controls and stores all of the GMUI information. This object demonstrates how to use GMUI.
// You should not change anything in the GMUI object after it is created or else errors occur.
// You may edit these initialization values and the Non-Internal scripts safely.
// :

// IF YOU PREFER, YOU COULD INITIALIZE GMUI HERE IN THE OBJECT INSTEAD, 
// BUT THEN YOU MAY NEED A NEW OBJECT FOR EACH GMUI INTERFACE:
// GMUI_CreateEvent(_Test_Form,16,0);


// You can call permitted GMUI commands from any object using:
//      with (GMUIid(number)) { your code here }
//
// or, if calling from a GMUI object like this one, you can use:
//
//      with (GMUIself()) { your code here }
//
// For more information, please read the documentation on how to use GMUI commands



// !NOTES!
// :
// GMUI object is persistent by default. That means that the UI can be used between rooms unless you uncheck it.
// If you delete the instance, the grid is also deleted and you cannot call the GMUI id any longer.
// :
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Call GMUI_DrawEvent(in draw event)

GMUI_DrawEvent();



// DEBUG INFORMATION, IF ENABLED:
GMUI_DrawDebug();


// !NOTE!
// GMUI object is persistent by default. That means that the UI can be used between rooms unless you uncheck it.
// If you delete the instance, the grid is also deleted and you cannot call the GMUI id any longer.
//




// FOR DEMONSTRATION PURPOSES ONLY:

if (RemovingGMUI) exit;
var mouseHor,mouseVert,ctrl,xoffset,yoffset;
mouseHor = GMUI_GridGetMouseCellX(GMUII());
mouseVert = GMUI_GridGetMouseCellY(GMUII());

// Find if there is a control at that position
if (mouseHor &gt;= (GMUII()).GMUI_grid_x[(GMUII()).UILayer] 
    &amp;&amp; mouseVert &gt;= (GMUII()).GMUI_grid_y[(GMUII()).UILayer] 
    &amp;&amp; mouseHor &lt; (GMUII()).GMUI_grid_w[(GMUII()).UILayer] 
    &amp;&amp; mouseVert &lt; (GMUII()).GMUI_grid_h[(GMUII()).UILayer]) {
    
    // Adjust to the view if enabled
    xoffset = 0;
    yoffset = 0;
    
    if ((GMUII()).UIsnaptoview) {
        xoffset = view_xview[(GMUII()).UIgridview];
        yoffset = view_yview[(GMUII()).UIgridview];
    }
    
    ctrl = ds_grid_get(GMUI_grid[UILayer],mouseHor,mouseVert);
    if (ctrl &gt; 0 &amp;&amp; instance_exists(ctrl)) {
        draw_set_color(c_dkgray);
        draw_set_alpha(.9);
        draw_set_valign(fa_middle);
        draw_set_halign(fa_left);
        if (ctrl.ControlType == "string")
            draw_text(0+xoffset,10+yoffset,string(GMUI_GetValue((ctrl).valueName)));
        else
            draw_text(0+xoffset,10+yoffset,string_format(GMUI_GetValue((ctrl).valueName),1,6));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
