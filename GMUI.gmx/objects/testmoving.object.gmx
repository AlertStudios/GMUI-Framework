<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>moving=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Test: Move the view
if (keyboard_check(vk_left)) {
    if (view_xview[0] &gt; 0)
        view_xview[0] -= 2;
    else
        view_xview[0] = 0;
}
else if (keyboard_check(vk_right)) {
    if (view_xview[0] + view_wview[0] &lt; room_width)
        view_xview[0] += 2;
    else
        view_xview[0] = room_width - view_wview[0];
}

if (keyboard_check(vk_up)) {
    if (view_yview[0] &gt; 0)
        view_yview[0] -= 2;
    else
        view_yview[0] = 0;
}
else if (keyboard_check(vk_down)) {
    if (view_yview[0] + view_hview[0] &lt; room_height)
        view_yview[0] += 2;
    else
        view_yview[0] = room_height - view_hview[0];
}


// Test: Move the group

if (moving) {
    with (GMUIid(1)) {
        GMUI_GroupSetPositionActual(0,1,mouse_x,mouse_y);
    }
}

// Test: Transition the group

if (mouse_check_button_pressed(mb_right)) {
    if (GMUIid(1)) {
        //GMUI_ControlTransitionToCell("MoveButton2", GMUI_GridGetMouseCellX(GMUII(),mouse_x), GMUI_GridGetMouseCellY(GMUII(),mouse_y), easeElasticOut, 30);
        GMUI_GroupTransitionToCell(0, 1, GMUI_GridGetMouseCellX(GMUII()), GMUI_GridGetMouseCellY(GMUII()), easeElasticOut, 30);
        //GMUI_GroupTransitionToActual(0, 1, mouse_x, mouse_y, easeElasticOut, 30);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
